// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SepSpatialClusterCpp
Rcpp::List SepSpatialClusterCpp(const Rcpp::List& vList, const Rcpp::List& Adjlist, const Rcpp::List& yList_int, const Rcpp::List& Mu_int, const Rcpp::List& Sigma_int, const arma::cube& Psi_int, const double& beta_int, const arma::vec& beta_grid, const int& maxIter_ICM, const int& maxIter, const double& epsLogLik, const bool& verbose, const bool& homo, const bool& Sigma_equal, const bool& Sigma_diag, const bool& Sp_embed, const arma::uword& maxK, const arma::uword& minK, const int& coreNum);
RcppExport SEXP _SC_MEB2_SepSpatialClusterCpp(SEXP vListSEXP, SEXP AdjlistSEXP, SEXP yList_intSEXP, SEXP Mu_intSEXP, SEXP Sigma_intSEXP, SEXP Psi_intSEXP, SEXP beta_intSEXP, SEXP beta_gridSEXP, SEXP maxIter_ICMSEXP, SEXP maxIterSEXP, SEXP epsLogLikSEXP, SEXP verboseSEXP, SEXP homoSEXP, SEXP Sigma_equalSEXP, SEXP Sigma_diagSEXP, SEXP Sp_embedSEXP, SEXP maxKSEXP, SEXP minKSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type vList(vListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Adjlist(AdjlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type yList_int(yList_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Mu_int(Mu_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Sigma_int(Sigma_intSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Psi_int(Psi_intSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_int(beta_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_grid(beta_gridSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter_ICM(maxIter_ICMSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsLogLik(epsLogLikSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type homo(homoSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Sigma_equal(Sigma_equalSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Sigma_diag(Sigma_diagSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Sp_embed(Sp_embedSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type minK(minKSEXP);
    Rcpp::traits::input_parameter< const int& >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(SepSpatialClusterCpp(vList, Adjlist, yList_int, Mu_int, Sigma_int, Psi_int, beta_int, beta_grid, maxIter_ICM, maxIter, epsLogLik, verbose, homo, Sigma_equal, Sigma_diag, Sp_embed, maxK, minK, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// getneighborhood_fast
arma::sp_umat getneighborhood_fast(const arma::mat x, double radius);
RcppExport SEXP _SC_MEB2_getneighborhood_fast(SEXP xSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighborhood_fast(x, radius));
    return rcpp_result_gen;
END_RCPP
}
// wpcaCpp
Rcpp::List wpcaCpp(const arma::mat& X, const int& nPCs, const bool& weighted);
RcppExport SEXP _SC_MEB2_wpcaCpp(SEXP XSEXP, SEXP nPCsSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type nPCs(nPCsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(wpcaCpp(X, nPCs, weighted));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SC_MEB2_SepSpatialClusterCpp", (DL_FUNC) &_SC_MEB2_SepSpatialClusterCpp, 19},
    {"_SC_MEB2_getneighborhood_fast", (DL_FUNC) &_SC_MEB2_getneighborhood_fast, 2},
    {"_SC_MEB2_wpcaCpp", (DL_FUNC) &_SC_MEB2_wpcaCpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SC_MEB2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
